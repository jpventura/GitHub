apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'

android {
    compileSdkVersion versions.compile_sdk
    buildToolsVersion versions.build_tools

    dataBinding {
        enabled = true
    }

    configurations {
        ktlint
    }

    defaultConfig {
        applicationId "com.jpventura.github"
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        abortOnError true
        textReport true
        textOutput 'stdout'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
    }

}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    ktlint "com.pinterest:ktlint:${versions.ktlint}"

    api project(":core-domain")

    implementation "android.arch.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "android.arch.navigation:navigation-ui-ktx:${versions.navigation}"
    implementation "androidx.appcompat:appcompat:${versions.app_compat}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"
    implementation "androidx.core:core-ktx:${versions.core_ktx}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.preference:preference-ktx:${versions.app_compat}"
    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"
    implementation "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "org.kodein.di:kodein-di-framework-android-x:${versions.kodein}"
    implementation "org.kodein.di:kodein-di-generic-jvm:${versions.kodein}"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation project(":data")
    implementation project(":domain")

    debugImplementation "com.facebook.stetho:stetho:${versions.stetho}"
    debugImplementation "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
    debugImplementation "com.facebook.stetho:stetho-urlconnection:${versions.stetho}"

    testImplementation "junit:junit:${versions.junit}"

    androidTestImplementation "androidx.test.ext:junit:${versions.junit_ext}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
}
lint.dependsOn ktlint

task ktlintFix(type: JavaExec, group: "cleanup") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
lintFix.dependsOn ktlintFix


task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/*BR*.*',
            '**/*Retrofit*.*',
            '**/*Test*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/R$*.class',
            '**/R.class',
            'android/**/*.*',
            'androidx/**/*.*',
            'com/google/**/*.*',
            'androidx/databinding/**/*.*',
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: excludes)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: excludes)

    classDirectories.from([debugTree], [kotlinDebugTree])

    sourceDirectories.from([
            android.sourceSets.main.java.srcDirs,
            "${project.projectDir}/src/main/kotlin"
    ])

    executionData.from(
            "$buildDir/jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/flavors/**/*coverage.ec"
    )
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500"
    }
}
